Coucou Kibel, si tu parviens à lire ce message.. eh bien je te remercie du fond du cœur d'avoir pris le temps et d'avoir fait tout ce trajet pour décoder mon message, je ne m'y attendais pas. On a là a true man of culture qui connait el famoso base64, hein ? :)
Mais bon.. Il y a de fortes chances que tu ne le lises pas et que mon message tombe au fin fond des oubliettes, ce n'est pas grave au moins j'aurais tenté. Si malgré tout, tu es là, assis devant ton écran, en train de le lire actuellement, sache que ça me fait hyper plaisir et que ça me rend honnêtement super heureuse ^-^

M'enfin, j'espère que tu te portes bien et que tu vas bien surtout. Que cela soit pour tes études ou juste dans ta vie.
Je voulais juste t'écrire ce message pour que tu saches la vérité. Je n'attends pas spécialement une réponse de ta part. Juste le fait que tu lises ce message me suffit amplement.

Tu as sûrement remarqué que j'ai commencé à prendre mes distances après notre rupture et je veux que tu saches que ce n'est absolument pas de ta faute. Je n'ai rien contre toi. Je ne te déteste pas non plus et de toute façon je n'y arriverai pas à te détester malgré ce qui s'est passé, je veux que tu le saches.
De même, tu as dû te rendre compte que je t'ai bloqué sur insta et Discord et c'est pour une bonne raison. Ce qui est arrivé est malheureusement arrivé, et je ne peux m'en prendre qu'à moi-même. Mes parents sont au courant de notre relation et c'est le prix à payer pour l'avoir caché, donc ça m'apprendra. J'ai déjà vécu pire donc je préfère prendre tout et subir que de les laisser te harceler et te mener la misère. Tu en as déjà bavé au cours de ta vie et cette année, je ne veux pas que tu souffres encore plus. Qui sait ce qu'ils te feraient si jamais ils trouvent ton adresse, je ne voulais absolument pas que tu prennes le risque et je n'ai pas du tout envie que mes parents te font subir ce qu'ont vécu les précédents garçons qui ont tenté de me "draguer".

Te bloquer sur ces réseaux sociaux et effacer tous mes messages que j'ai échangés avec toi était malheureusement la seule solution que j'avais pour les empêcher de trouver une quelconque information sur toi. 
J'ai récolté ce que j'ai semé mais je ne veux absolument pas que tu culpabilises et que tu te dises que ce qui est en train de m'arriver est de ta faute. Au grand jamais, ne pense pas ça, je te l'interdis.

Je savais d'ores et déjà que notre relation n'allait pas du tout durer avant même d'accepter de me mettre en couple avec toi. Je voulais quand même essayer et voir ça fait quoi d'être en couple. Je me suis mise avec toi par curiosité et sûrement par frustration comme je n'ai jamais eu le droit d'être dans une relation à cause des restrictions imposées par mes parents.
Néanmoins, j'ai quand même sincèrement apprécié et chéri tous les moments que j'ai passés avec toi. Cela va de même pour nos messages qu'on a principalement échangés sur Discord, même avant que tu m'avoues tes sentiments. 

Par contre, ce qui m'attristait le plus, c'est que tu ne m'aies pas dit clairement ce qui n'allait pas avec moi mais que tu préférais le dire à Meredith plutôt qu'à moi. Meredith est bien plus au courant que moi qui suis concernée dans la relation. Finalement je sais beaucoup moins de choses qu'elle et c'est triste, mais c'est comme ça. Je n'ai pas cherché à lire les messages que tu lui as envoyés car je sais pertinemment que ça ne m'apporterait pas grand chose, j'attendais tout simplement que tu me le dises de ton plein gré.
Je m'en fiche si cela va me blesser mais j'aurais quand même aimé que tu m'en aies fait part plutôt que tu me dises seulement que tu n'avais pas regretté de t'être mis avec moi. Je doute fort que tout aille bien durant notre relation et que tu n'aies rien regretté.
Mais je suis aussi fautive. Il y a aussi des choses que je n'ai pas pu te dire même après qu'on s'est donné rendez-vous pour faire le point l'autre fois. Ce qui a manqué au sein de notre relation, c'est tout simplement la communication.

Comme je sais qu'on ne se reverra pas, voire jamais, je préfère donc te dire par le biais de ce message codé car je sais que mes parents ne parviendront pas à le décoder et à le lire.
Pendant qu'on était en couple, on était juste "broken" mentalement tous les deux. Je me suis juste dit que plus rien n'avait d'importance, j'étais juste au fond du trou. Au début, ça allait mais plus les jours avançaient, plus je trouvais que tout allait mal pour nous deux. Je pense que je n'avais tout simplement plus la force de te dire non quand tu voulais faire quelque chose avec moi (même si au fond, je n'en avais pas forcément envie et que je voulais pleurer plusieurs fois). Limite tu pouvais faire ce que tu voulais de moi, plus rien n'avait d'importance. Chaque jour, je culpabilisais à mort, je me sentais tellement mal de m'être mise dans une relation où ce n'est pas réciproque et j'essayais de me forcer à t'aimer romantiquement. Je ne sais pas si ça se voyait, mais au fond je n'arrivais pas du tout. Je trouvais que je n'étais juste pas du tout sincère avec toi. Et je m'en excuse sincèrement. J'ai remarqué que même tes "Je t'aime" n'avaient plus la même signification et la même intensité qu'au début, et je comprends. Je pense que ça a vraiment été dur pour moi de te dire la vérité et dur pour toi de me dire clairement que tes sentiments ont changé au fil du temps. Sûrement par peur de blesser l'un et l'autre.
J'ignore si tu t'es rendu compte à ce moment à quel point notre relation n'était pas du tout saine. Et ça me faisait juste mal au cœur de te voir aller si mal, de voir que tu es en train de couler dans ta phase dépressive parce que tu n'arrivais pas à travailler en prépa ou pour autre chose. Je regrette surtout de n'avoir pas su t'aider.

J'étais juste détruite intérieurement avec tous les problèmes que j'avais sur les épaules, même si je faisais quand même tout mon possible pour t'aider à aller mieux. Honnêtement, ma priorité était surtout que tu sortes de cette fichue boucle infernale, je m'en fichais complètement du reste et de moi-même. Sauf que j'ai remarqué trop tard qu'être dans cette relation me fatiguait plus qu'autre chose, d'autant plus que je n'ai pas du tout pu t'apporter mon aide et qu'on coulait totalement ensemble. Je voulais plusieurs fois abandonner mais je n'arrivais pas, je ne trouvais pas d'issue.

Mais je veux être franche là dessus et je pense que tu l'as probablement remarqué, mais je n'étais pas sûre de mes sentiments. J'ai quand même essayé et je me suis forcée à t'aimer. Mais une chose n'a pas fonctionné, je ne peux juste pas prétendre aimer quelqu'un si moi-même je n'arrive même pas à m'aimer. Me forcer dans une relation ne mènera rien de bon et la preuve ; ça a mal fini entre nous. J'ignore si être avec moi t'aie apporté quelque chose quand même. Après la rupture, j'espère que ça t'a finalement libéré de ne plus être avec quelqu'un d'aussi faible mentalement et physiquement. J'espère que ça t'a permis de moins culpabiliser sur le fait que tes sentiments aient changé et de tourner la page dorénavant.

Je l'ai fait intentionnellement d'être froide et distante avec toi (même si ça me faisait mal) car je veux simplement que tu m'oublies parce que ça ne t'apportera rien de rester en contact avec moi hormis des problèmes et des inquiétudes. J'espère sincèrement que pour ta prochaine relation, tu seras beaucoup plus épanoui avec une personne que tu aimeras et qui t'aimera réellement en retour qu'en étant avec moi ^-^

Tout ça pour aussi te dire que je ne souhaite que ton bonheur, tu le mérites vraiment. Tu as du potentiel et ne laisse personne te dire le contraire. Je sais que tu arriveras à te démarquer et laisser une trace positive dans ce monde, j'en suis certaine. Profite un maximum de ta vie, je te souhaite que du best :)
Sache que j'ai été tout de même heureuse d'avoir vécu ces moments priviligiés avec toi malgré tout.

Merci infiniment de m'avoir également appris de nouvelles choses et de m'avoir aidée quand j'étais sur le point de craquer plusieurs fois et d'abandonner cette fichue vie qu'est la mienne. Et hey Kibel, tu sais ? Quand j'avais ma fracture à ma hanche, je comptais en finir avec ma vie dans la chambre, seule, mais quand tu m'avais envoyé ton message pour me rendre visite ce jour-là en m'offrant le fameux gâteau ? Eh bien quand tu m'avais offert ton gâteau, je voulais vraiment pleurer mais je me suis retenue. Pour te dire que tes "petites actions" m'avaient quand même sauvée et évité de commettre encore une bêtise, et tu t'en es sûrement pas rendu compte. Mais merci, sincèrement pour ce jour-là et le gâteau ; j'étais vraiment heureuse.
Enfin, merci Kibel de m'avoir aimée et d'être tombé amoureux de moi. Je n'oublierais jamais ce que tu as fait pour moi quand j'étais au plus mal, je t'en serais éternellement reconnaissante. Merci d'avoir lu ce message :)

Jenny, 12/07/21
